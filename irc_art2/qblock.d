module qblock;
nothrow:

struct BLOCK_MAP{
	ubyte[8] bits; //8ths
	ushort element;
}
const BLOCK_MAP[] bmap=[
	{[ 0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000 ],0x2580},
	{[ 0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b11111111 ],0x2581},
	{[ 0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b11111111,
	   0b11111111 ],0x2582},
	{[ 0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b11111111,
	   0b11111111,
	   0b11111111 ],0x2583},
	{[ 0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111 ],0x2584},
	{[ 0b00000000,
	   0b00000000,
	   0b00000000,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111 ],0x2585},
	{[ 0b00000000,
	   0b00000000,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111 ],0x2586},
	{[ 0b00000000,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111 ],0x2587},
	{[ 0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111 ],0x2588},
	{[ 0b11111110,
	   0b11111110,
	   0b11111110,
	   0b11111110,
	   0b11111110,
	   0b11111110,
	   0b11111110,
	   0b11111110 ],0x2589},
	{[ 0b11111100,
	   0b11111100,
	   0b11111100,
	   0b11111100,
	   0b11111100,
	   0b11111100,
	   0b11111100,
	   0b11111100 ],0x258A},
	{[ 0b11111000,
	   0b11111000,
	   0b11111000,
	   0b11111000,
	   0b11111000,
	   0b11111000,
	   0b11111000,
	   0b11111000 ],0x258B},
	{[ 0b11110000,
	   0b11110000,
	   0b11110000,
	   0b11110000,
	   0b11110000,
	   0b11110000,
	   0b11110000,
	   0b11110000 ],0x258C},
	{[ 0b11100000,
	   0b11100000,
	   0b11100000,
	   0b11100000,
	   0b11100000,
	   0b11100000,
	   0b11100000,
	   0b11100000 ],0x258D},
	{[ 0b11000000,
	   0b11000000,
	   0b11000000,
	   0b11000000,
	   0b11000000,
	   0b11000000,
	   0b11000000,
	   0b11000000 ],0x258E},
	{[ 0b10000000,
	   0b10000000,
	   0b10000000,
	   0b10000000,
	   0b10000000,
	   0b10000000,
	   0b10000000,
	   0b10000000 ],0x258F},
	{[ 0b00001111,
	   0b00001111,
	   0b00001111,
	   0b00001111,
	   0b00001111,
	   0b00001111,
	   0b00001111,
	   0b00001111 ],0x2590},
	{[ 0b11111111,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000 ],0x2594},
	{[ 0b00000001,
	   0b00000001,
	   0b00000001,
	   0b00000001,
	   0b00000001,
	   0b00000001,
	   0b00000001,
	   0b00000001 ],0x2595},
	{[ 0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b11110000,
	   0b11110000,
	   0b11110000,
	   0b11110000 ],0x2596},
	{[ 0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00001111,
	   0b00001111,
	   0b00001111,
	   0b00001111 ],0x2597},
	{[ 0b11110000,
	   0b11110000,
	   0b11110000,
	   0b11110000,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000 ],0x2598},
	{[ 0b11110000,
	   0b11110000,
	   0b11110000,
	   0b11110000,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111 ],0x2599},
	{[ 0b11110000,
	   0b11110000,
	   0b11110000,
	   0b11110000,
	   0b00001111,
	   0b00001111,
	   0b00001111,
	   0b00001111 ],0x259A},
	{[ 0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11110000,
	   0b11110000,
	   0b11110000,
	   0b11110000 ],0x259B},
	{[ 0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b00001111,
	   0b00001111,
	   0b00001111,
	   0b00001111 ],0x259C},
	{[ 0b00001111,
	   0b00001111,
	   0b00001111,
	   0b00001111,
	   0b00000000,
	   0b00000000,
	   0b00000000,
	   0b00000000 ],0x259D},
	{[ 0b00001111,
	   0b00001111,
	   0b00001111,
	   0b00001111,
	   0b11110000,
	   0b11110000,
	   0b11110000,
	   0b11110000 ],0x259E},
	{[ 0b00001111,
	   0b00001111,
	   0b00001111,
	   0b00001111,
	   0b11111111,
	   0b11111111,
	   0b11111111,
	   0b11111111 ],0x259F},
	   
];

ubyte[8] get_qblock_bits(ushort element)
{
	ubyte[8] result;
	foreach(c;bmap){
		if(element==c.element)
			return c.bits;
	}
	return result;
}
void get_corners(const ubyte[8] bits,ref bool t1,ref bool t2,ref bool b1,ref bool b2)
{
	t1=cast(bool)(bits[0]&0x80);
	t2=bits[0]&1;
	b1=cast(bool)(bits[7]&0x80);
	b2=bits[7]&1;
}
ushort get_block_criteria(bool t1,bool t2,bool b1,bool b2)
{
	ushort result=0;
	foreach(b;bmap){
		if((b.element>=0x2596 && b.element<=0x259F)
		   || b.element==0x2580
		   || b.element==0x2584
		   || b.element==0x2588
		   || b.element==0x258C
		   || b.element==0x2590){
			bool _t1,_t2,_b1,_b2;
			get_corners(b.bits,_t1,_t2,_b1,_b2);
			if(t1==_t1 && t2==_t2 && b1==_b1 && b2==_b2){
				result=b.element;
				break;
			}
		}
	}
	return result;
}
ushort get_qblock(bool LR,bool TB,ushort element)
{
	ushort result=0;
	ubyte[8] bits;
	bool t1,t2,b1,b2;
	bits=get_qblock_bits(element);
	get_corners(bits,t1,t2,b1,b2);
	t1|=LR&&TB;
	t2|=(!LR)&&TB;
	b1|=LR&&(!TB);
	b2|=(!LR)&&(!TB);
	result=get_block_criteria(t1,t2,b1,b2);
	return result;
}
bool get_element_corners(ushort element,ref bool t1,ref bool t2,ref bool b1,ref bool b2)
{
	bool result=true;
	ubyte[8] bits;
	bits=get_qblock_bits(element);
	get_corners(bits,t1,t2,b1,b2);
	return result;
}
